# my-ai-log-viewer/docker-compose.yml
version: '3.9'

services:
  # New PostgreSQL database service for this application
  db:
    image: postgres:15.5-alpine # Using a smaller image for faster downloads
    container_name: ai_log_db
    ports:
      - "5433:5432" # Map external host port 5433 to internal container port 5432
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    volumes:
      - ai_log_db_data:/var/lib/postgresql/data # Persistent data volume
    healthcheck: # Basic health check to ensure PostgreSQL is ready
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ai-log-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: my_ai_log_viewer_backend
    ports:
      - "8001:8000" # Expose backend port
    env_file:
      - ./.env # Load PostgreSQL connection variables from the main .env
    environment: # Override DATABASE_URL to use the new 'db' service name
      DATABASE_URL: postgresql://${PG_USER}:${PG_PASSWORD}@db:5432/${PG_DB}
    networks:
      - ai-log-network
    depends_on:
      db:
        condition: service_healthy # Ensure DB is healthy before starting backend

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: my_ai_log_viewer_frontend
    ports:
      - "3002:80" # Map host port 3001 to container port 80 (Nginx default)
    env_file:
      - ./frontend/.env # Load frontend specific environment variables (VITE_APP_API_BASE_URL)
    networks:
      - ai-log-network
    depends_on:
      - backend # Frontend depends on backend being up

# Define internal network for this application
networks:
  ai-log-network:
    driver: bridge

# Define a persistent volume for the new database
volumes:
  ai_log_db_data:
    driver: local